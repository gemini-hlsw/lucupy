{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WELCOME","title":"WELCOME"},{"location":"#welcome","text":"","title":"WELCOME"},{"location":"docs/SUMMARY/","text":"lucupy decorators helpers minimodel atom constraints group magnitude observation observationmode program qastate resource semester site target timeallocation timingwindow too observatory abstract gemini geminiobservation geminiproperties sky altitude brightness constants events moon sun utils timeutils types","title":"SUMMARY"},{"location":"docs/lucupy/","text":"Lucupy This package contains data structures and functions to support all the microservices that make up the Schedule app for the Gemini Program Plataform (and other auxiliary services such as Env and Resource) Content Minimodel: A small version of GPP's data model. This allows for any services to use common data structures to model programs, observations, etc. Helpers: A collection of functions that helps with the handling of data. Observatory: An API that allows Observatory-specific behaviour to be added to a service (or sub-service: e.g Collector) Sky: A library that calculates night events for the use of visibility in Observations Time Utils: Time handling functions Types: A collection of variables to use with Python typing Decorators: A collection of decorators (Currently empty)","title":"lucupy"},{"location":"docs/lucupy/#lucupy--lucupy","text":"This package contains data structures and functions to support all the microservices that make up the Schedule app for the Gemini Program Plataform (and other auxiliary services such as Env and Resource)","title":"Lucupy"},{"location":"docs/lucupy/#lucupy--content","text":"Minimodel: A small version of GPP's data model. This allows for any services to use common data structures to model programs, observations, etc. Helpers: A collection of functions that helps with the handling of data. Observatory: An API that allows Observatory-specific behaviour to be added to a service (or sub-service: e.g Collector) Sky: A library that calculates night events for the use of visibility in Observations Time Utils: Time handling functions Types: A collection of variables to use with Python typing Decorators: A collection of decorators (Currently empty)","title":"Content"},{"location":"docs/lucupy/decorators/","text":"scalar_input ( func ) Decorator to convert a function that returns a tuple to a function that returns a scalar. TODO: TO IMPLEMENT THIS IS NECESSARY TO REMOVE ASTROPY outputs or made them numpy compatible.","title":"decorators"},{"location":"docs/lucupy/decorators/#lucupy.decorators.scalar_input","text":"Decorator to convert a function that returns a tuple to a function that returns a scalar. TODO: TO IMPLEMENT THIS IS NECESSARY TO REMOVE ASTROPY outputs or made them numpy compatible.","title":"scalar_input()"},{"location":"docs/lucupy/helpers/","text":"angular_distance ( ra1 , dec1 , ra2 , dec2 ) Calculate the angular distance between two points on the sky. based on https://github.com/gemini-hlsw/lucuma-core/blob/master/modules/core/shared/src/main/scala/lucuma/core/math/Coordinates.scala#L52 Parameters: Name Type Description Default ra1 float Right Ascension for point 1 required dec1 float Declination for point 1 required ra2 float Right Ascension for point 2 required dec2 float Declination for point 2 required Returns: Name Type Description float float Angular Distance barcode_to_mask ( barcode , rootname ) Convert a barcode string to a mask string. Parameters: Name Type Description Default barcode str Mask Barcode required rootname Optional [ str ] Keyword that allows the decoding required Returns: Name Type Description str str description dms2deg ( d , m , s , sign ) Degrees, minutes, seconds to decimal degrees Parameters: Name Type Description Default d int Degree required m int Minute required s float Seconds required sign str Mathematical sign required Raises: Type Description ValueError If signs is not in the SIGN dictionary Returns: Name Type Description float float Decimal degrees value dms2rad ( d , m , s , sign ) Degrees, minutes, seconds to radians Parameters: Name Type Description Default d int Degree required m int Minute required s float Seconds required sign str Mathematical sign required Raises: Type Description ValueError If signs is not in the SIGN dictionary Returns: Name Type Description float float Radian value dmsstr2deg ( s ) Degrees, minutes, seconds (in string form) to decimal degrees Parameters: Name Type Description Default s str string to convert required Raises: Type Description ValueError wrong format Returns: Name Type Description float float value in decimal degress flatten ( lst ) Flattens any iterable, no matter how irregular. Deliberately left untyped to allow for maximum type usage. Example flatten([1, 2, [3, 4, 5], [[6, 7], 8, [9, 10]]]) Parameters: Name Type Description Default lst n-dimensional array required Yields: Type Description Value of the iterable. hms2deg ( h , m , s ) HH:mm:ss to degrees Parameters: Name Type Description Default h int Hour required m int Minute required s float Second required Returns: Name Type Description float float Value in degrees hms2rad ( h , m , s ) HH:mm:ss to radians Parameters: Name Type Description Default h int Hour required m int Minute required s float Second required Returns: Name Type Description float float Value in degrees hmsstr2deg ( s ) HH:mm:ss in string to degrees Parameters: Name Type Description Default s str String to be transform required Raises: Type Description ValueError Wrong format Returns: Name Type Description float float Value in degrees mask_to_barcode ( mask , inst ) Convert a mask string to a barcode string. Parameters: Name Type Description Default mask str GMOS Mask required inst Optional [ str ] Instrument required Returns: Name Type Description str str Mask Barcode round_minute ( time , up = False ) Round a time down (truncate) or up to the nearest minute time: an astropy.Time Parameters: Name Type Description Default time Time times value(s) to round down/up required up bool bool indicating whether to round up False Returns: Type Description Time Round up/down value(s) on Astropy Time object str_to_bool ( s ) Conversion from string to bolean Arg s: parameter to convert Returns: Type Description bool true if and only if s is defined and some variant capitalization of 'yes' or 'true'.","title":"helpers"},{"location":"docs/lucupy/helpers/#lucupy.helpers.angular_distance","text":"Calculate the angular distance between two points on the sky. based on https://github.com/gemini-hlsw/lucuma-core/blob/master/modules/core/shared/src/main/scala/lucuma/core/math/Coordinates.scala#L52 Parameters: Name Type Description Default ra1 float Right Ascension for point 1 required dec1 float Declination for point 1 required ra2 float Right Ascension for point 2 required dec2 float Declination for point 2 required Returns: Name Type Description float float Angular Distance","title":"angular_distance()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.barcode_to_mask","text":"Convert a barcode string to a mask string. Parameters: Name Type Description Default barcode str Mask Barcode required rootname Optional [ str ] Keyword that allows the decoding required Returns: Name Type Description str str description","title":"barcode_to_mask()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.dms2deg","text":"Degrees, minutes, seconds to decimal degrees Parameters: Name Type Description Default d int Degree required m int Minute required s float Seconds required sign str Mathematical sign required Raises: Type Description ValueError If signs is not in the SIGN dictionary Returns: Name Type Description float float Decimal degrees value","title":"dms2deg()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.dms2rad","text":"Degrees, minutes, seconds to radians Parameters: Name Type Description Default d int Degree required m int Minute required s float Seconds required sign str Mathematical sign required Raises: Type Description ValueError If signs is not in the SIGN dictionary Returns: Name Type Description float float Radian value","title":"dms2rad()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.dmsstr2deg","text":"Degrees, minutes, seconds (in string form) to decimal degrees Parameters: Name Type Description Default s str string to convert required Raises: Type Description ValueError wrong format Returns: Name Type Description float float value in decimal degress","title":"dmsstr2deg()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.flatten","text":"Flattens any iterable, no matter how irregular. Deliberately left untyped to allow for maximum type usage. Example flatten([1, 2, [3, 4, 5], [[6, 7], 8, [9, 10]]]) Parameters: Name Type Description Default lst n-dimensional array required Yields: Type Description Value of the iterable.","title":"flatten()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.hms2deg","text":"HH:mm:ss to degrees Parameters: Name Type Description Default h int Hour required m int Minute required s float Second required Returns: Name Type Description float float Value in degrees","title":"hms2deg()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.hms2rad","text":"HH:mm:ss to radians Parameters: Name Type Description Default h int Hour required m int Minute required s float Second required Returns: Name Type Description float float Value in degrees","title":"hms2rad()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.hmsstr2deg","text":"HH:mm:ss in string to degrees Parameters: Name Type Description Default s str String to be transform required Raises: Type Description ValueError Wrong format Returns: Name Type Description float float Value in degrees","title":"hmsstr2deg()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.mask_to_barcode","text":"Convert a mask string to a barcode string. Parameters: Name Type Description Default mask str GMOS Mask required inst Optional [ str ] Instrument required Returns: Name Type Description str str Mask Barcode","title":"mask_to_barcode()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.round_minute","text":"Round a time down (truncate) or up to the nearest minute time: an astropy.Time Parameters: Name Type Description Default time Time times value(s) to round down/up required up bool bool indicating whether to round up False Returns: Type Description Time Round up/down value(s) on Astropy Time object","title":"round_minute()"},{"location":"docs/lucupy/helpers/#lucupy.helpers.str_to_bool","text":"Conversion from string to bolean Arg s: parameter to convert Returns: Type Description bool true if and only if s is defined and some variant capitalization of 'yes' or 'true'.","title":"str_to_bool()"},{"location":"docs/lucupy/minimodel/","text":"A small version of GPP data model\"","title":"minimodel"},{"location":"docs/lucupy/minimodel/atom/","text":"Atom dataclass Atom information, where an atom is the smallest schedulable set of steps such that useful science can be obtained from performing them. Wavelengths must be specified in microns. Attributes: Name Type Description id int GPP atom id . In other case is given by the Provider exec_time timedelta Total time of execution. prog_time timedelta Program time. part_time timedelta Partner time. observed bool True if the STATUS is already observed. qa_state QAState guide_state bool True if a state exists. resources FrozenSet [ Resource ] Resources needed (Instrument, FPU, etc). wavelengths FrozenSet [ float ] Set of wavelengths.","title":"atom"},{"location":"docs/lucupy/minimodel/atom/#lucupy.minimodel.atom.Atom","text":"Atom information, where an atom is the smallest schedulable set of steps such that useful science can be obtained from performing them. Wavelengths must be specified in microns. Attributes: Name Type Description id int GPP atom id . In other case is given by the Provider exec_time timedelta Total time of execution. prog_time timedelta Program time. part_time timedelta Partner time. observed bool True if the STATUS is already observed. qa_state QAState guide_state bool True if a state exists. resources FrozenSet [ Resource ] Resources needed (Instrument, FPU, etc). wavelengths FrozenSet [ float ] Set of wavelengths.","title":"Atom"},{"location":"docs/lucupy/minimodel/constraints/","text":"CloudCover Bases: float , Enum Bins for observation cloud cover requirements or current conditions. Members CC50 = 0.5 CC70 = 0.7 CC80 = 0.8 CCANY = 1.0 Conditions dataclass A set of conditions. Note that we make this dataclass eq and ordered so that we can compare one set of conditions with another to see if one satisfies the other. This should be done via: current_conditions <= required_conditions. Attributes: Name Type Description cc ScalarOrNDArray [ CloudCover ] CloudCover iq ScalarOrNDArray [ ImageQuality ] ImageQuality sb ScalarOrNDArray [ SkyBackground ] SkyBackground wv ScalarOrNDArray [ WaterVapor ] WaterVapor __len__ () For array values, return the length of the arrays. For scalar values, return a length of 1. __post_init__ () Ensure that if any arrays are specified, all values are specified arrays of the same size. least_restrictive () classmethod Return the least possible restrictive conditions. most_restrictive_conditions ( conditions ) staticmethod Given an iterable of conditions, find the most restrictive amongst the set. If no conditions are given, return the most flexible conditions possible. Constraints dataclass The constraints required for an observation to be performed. Default airmass values to use for elevation constraints if The Constraints are not present in the Observation at all; or The elevation_type is set to NONE. Attributes: Name Type Description conditions Conditions Collection of conditions. elevation_type ElevationType Elevation type. elevation_min float Max value of elevation. elevation_max float Min value of elevation. timing_windows List [ TimingWindow ] Time windows in the constraints are in effect. strehl Strehl optional): None DEFAULT_AIRMASS_ELEVATION_MIN ClassVar [ float ] 1.0 DEFAULT_AIRMASS_ELEVATION_MAX ClassVar [ float ] 2.3 ElevationType Bases: IntEnum The type of elevation constraints in the observing conditions. Members NONE HOUR_ANGLE AIRMASS ImageQuality Bases: float , Enum Bins for observation image quality requirements or current conditions. Members IQ20 = 0.2 IQ70 = 0.7 IQ85 = 0.85 IQANY = 1.0 SkyBackground Bases: float , Enum Bins for observation sky background requirements or current conditions. Members SB20 = 0.2 SB50 = 0.5 SB80 = 0.8 SBANY = 1.0 Strehl Bases: float , Enum The Strehl ratio is a measure of the quality of optical image formation. Used variously in situations where optical resolution is compromised due to lens aberrations or due to imaging through the turbulent atmosphere, the Strehl ratio has a value between 0 and 1, with a hypothetical, perfectly unaberrated optical system having a Strehl ratio of 1. (Source: Wikipedia.) Members S00 = 0.0 S02 = 0.2 S04 = 0.4 S06 = 0.6 S08 = 0.8 S10 = 1.0 Variant dataclass A weather variant. wind_speed should be in m / s. Attributes: Name Type Description start_time datetime Time of the variant. iq Union [ npt . NDArray [ ImageQuality ], ImageQuality ] Image quality. cc Union [ npt . NDArray [ CloudCover ], CloudCover ] Cloud Cover. wind_dir Angle Wind direction. wind_spd Quantity Wind speed. __post_init__ () Ensure that if any arrays are specified, all values are specified arrays of the same size. WaterVapor Bases: float , Enum Bins for observation water vapor requirements or current conditions. Members WV20 = 0.2 WV50 = 0.5 WV80 = 0.8 WVANY = 1.0","title":"constraints"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.CloudCover","text":"Bases: float , Enum Bins for observation cloud cover requirements or current conditions. Members CC50 = 0.5 CC70 = 0.7 CC80 = 0.8 CCANY = 1.0","title":"CloudCover"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Conditions","text":"A set of conditions. Note that we make this dataclass eq and ordered so that we can compare one set of conditions with another to see if one satisfies the other. This should be done via: current_conditions <= required_conditions. Attributes: Name Type Description cc ScalarOrNDArray [ CloudCover ] CloudCover iq ScalarOrNDArray [ ImageQuality ] ImageQuality sb ScalarOrNDArray [ SkyBackground ] SkyBackground wv ScalarOrNDArray [ WaterVapor ] WaterVapor","title":"Conditions"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Conditions.__len__","text":"For array values, return the length of the arrays. For scalar values, return a length of 1.","title":"__len__()"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Conditions.__post_init__","text":"Ensure that if any arrays are specified, all values are specified arrays of the same size.","title":"__post_init__()"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Conditions.least_restrictive","text":"Return the least possible restrictive conditions.","title":"least_restrictive()"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Conditions.most_restrictive_conditions","text":"Given an iterable of conditions, find the most restrictive amongst the set. If no conditions are given, return the most flexible conditions possible.","title":"most_restrictive_conditions()"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Constraints","text":"The constraints required for an observation to be performed. Default airmass values to use for elevation constraints if The Constraints are not present in the Observation at all; or The elevation_type is set to NONE. Attributes: Name Type Description conditions Conditions Collection of conditions. elevation_type ElevationType Elevation type. elevation_min float Max value of elevation. elevation_max float Min value of elevation. timing_windows List [ TimingWindow ] Time windows in the constraints are in effect. strehl Strehl optional): None DEFAULT_AIRMASS_ELEVATION_MIN ClassVar [ float ] 1.0 DEFAULT_AIRMASS_ELEVATION_MAX ClassVar [ float ] 2.3","title":"Constraints"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.ElevationType","text":"Bases: IntEnum The type of elevation constraints in the observing conditions. Members NONE HOUR_ANGLE AIRMASS","title":"ElevationType"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.ImageQuality","text":"Bases: float , Enum Bins for observation image quality requirements or current conditions. Members IQ20 = 0.2 IQ70 = 0.7 IQ85 = 0.85 IQANY = 1.0","title":"ImageQuality"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.SkyBackground","text":"Bases: float , Enum Bins for observation sky background requirements or current conditions. Members SB20 = 0.2 SB50 = 0.5 SB80 = 0.8 SBANY = 1.0","title":"SkyBackground"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Strehl","text":"Bases: float , Enum The Strehl ratio is a measure of the quality of optical image formation. Used variously in situations where optical resolution is compromised due to lens aberrations or due to imaging through the turbulent atmosphere, the Strehl ratio has a value between 0 and 1, with a hypothetical, perfectly unaberrated optical system having a Strehl ratio of 1. (Source: Wikipedia.) Members S00 = 0.0 S02 = 0.2 S04 = 0.4 S06 = 0.6 S08 = 0.8 S10 = 1.0","title":"Strehl"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Variant","text":"A weather variant. wind_speed should be in m / s. Attributes: Name Type Description start_time datetime Time of the variant. iq Union [ npt . NDArray [ ImageQuality ], ImageQuality ] Image quality. cc Union [ npt . NDArray [ CloudCover ], CloudCover ] Cloud Cover. wind_dir Angle Wind direction. wind_spd Quantity Wind speed.","title":"Variant"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.Variant.__post_init__","text":"Ensure that if any arrays are specified, all values are specified arrays of the same size.","title":"__post_init__()"},{"location":"docs/lucupy/minimodel/constraints/#lucupy.minimodel.constraints.WaterVapor","text":"Bases: float , Enum Bins for observation water vapor requirements or current conditions. Members WV20 = 0.2 WV50 = 0.5 WV80 = 0.8 WVANY = 1.0","title":"WaterVapor"},{"location":"docs/lucupy/minimodel/group/","text":"AndGroup dataclass Bases: Group The concrete implementation of an AND group. Attributes: Name Type Description group_option AndOption Specify how its observations should be handled. previous int An index into the group's children to indicate the previously observed child, or None if none of the children have yet been observed. Default to None. exec_time () Total execution time across the children of this group. Returns: Name Type Description exec_time timedelta Sum of all the executions time. instruments () Returns: Name Type Description instruments FrozenSet [ Resource ] A set of all instruments used in this group. total_used () Total time used across the group: includes program time and partner time. Returns: Name Type Description total_used timedelta Sum of all total used times. AndOption Bases: Enum Different options available for ordering AND group children. CUSTOM is used for cadences. Members CONSEC_ORDERED CONSEC_ANYORDER NIGHT_ORDERED NIGHT_ANYORDER ANYORDER CUSTOM Group dataclass Bases: ABC This is the base implementation of AND / OR Groups. Python does not allow classes to self-reference unless in static contexts, so we make a very simple base class to self-reference from subclasses since we need this functionality to allow for group nesting. Attributes: Name Type Description id GroupID the identification of the group. group_name str a human-readable name of the group. number_to_observe int the number of children in the group that must be observed for the group to be considered complete. delay_min(timedelta) int used in cadences. delay_ma(timedelta) int used in cadences. children Union [ List [ Group ], Observation ] member(s) of the group constraints () Returns: Type Description FrozenSet [ Constraints ] FrozenSet[Constraints]: All set of Constraints in the group. is_observation_group () Returns: Name Type Description bool bool True if the group is just a single Observation, otherwise False. is_scheduling_group () Returns: Name Type Description bool bool True if the group is a scheduling group, otherwise False. observations () Returns: Type Description List [ Observation ] List[Observation]: A set of Observations. required_resources () Returns: Type Description FrozenSet [ Resource ] FrozenSet[Resource]: A set of Resources. show ( depth = 1 ) Print content of the Group. Parameters: Name Type Description Default depth int depth of the separator. Defaults to 1. 1 sites () All belonging Sites. Returns: Type Description FrozenSet [ Site ] FrozenSet[Site]: Set of Sites for all observations. subgroup_ids () Get the ids for all the sub-groups inside. Returns: Type Description FrozenSet [ GroupID ] FrozenSet[GroupID]: Set of GroupID values. wavelengths () Returns: Type Description FrozenSet [ float ] FrozenSet[float]: A set of wavelengths. OrGroup dataclass Bases: Group The concrete implementation of an OR group. The restrictions on an OR group is that it must explicitly require not all of its children to be observed.","title":"group"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.AndGroup","text":"Bases: Group The concrete implementation of an AND group. Attributes: Name Type Description group_option AndOption Specify how its observations should be handled. previous int An index into the group's children to indicate the previously observed child, or None if none of the children have yet been observed. Default to None.","title":"AndGroup"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.AndGroup.exec_time","text":"Total execution time across the children of this group. Returns: Name Type Description exec_time timedelta Sum of all the executions time.","title":"exec_time()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.AndGroup.instruments","text":"Returns: Name Type Description instruments FrozenSet [ Resource ] A set of all instruments used in this group.","title":"instruments()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.AndGroup.total_used","text":"Total time used across the group: includes program time and partner time. Returns: Name Type Description total_used timedelta Sum of all total used times.","title":"total_used()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.AndOption","text":"Bases: Enum Different options available for ordering AND group children. CUSTOM is used for cadences. Members CONSEC_ORDERED CONSEC_ANYORDER NIGHT_ORDERED NIGHT_ANYORDER ANYORDER CUSTOM","title":"AndOption"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group","text":"Bases: ABC This is the base implementation of AND / OR Groups. Python does not allow classes to self-reference unless in static contexts, so we make a very simple base class to self-reference from subclasses since we need this functionality to allow for group nesting. Attributes: Name Type Description id GroupID the identification of the group. group_name str a human-readable name of the group. number_to_observe int the number of children in the group that must be observed for the group to be considered complete. delay_min(timedelta) int used in cadences. delay_ma(timedelta) int used in cadences. children Union [ List [ Group ], Observation ] member(s) of the group","title":"Group"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.constraints","text":"Returns: Type Description FrozenSet [ Constraints ] FrozenSet[Constraints]: All set of Constraints in the group.","title":"constraints()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.is_observation_group","text":"Returns: Name Type Description bool bool True if the group is just a single Observation, otherwise False.","title":"is_observation_group()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.is_scheduling_group","text":"Returns: Name Type Description bool bool True if the group is a scheduling group, otherwise False.","title":"is_scheduling_group()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.observations","text":"Returns: Type Description List [ Observation ] List[Observation]: A set of Observations.","title":"observations()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.required_resources","text":"Returns: Type Description FrozenSet [ Resource ] FrozenSet[Resource]: A set of Resources.","title":"required_resources()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.show","text":"Print content of the Group. Parameters: Name Type Description Default depth int depth of the separator. Defaults to 1. 1","title":"show()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.sites","text":"All belonging Sites. Returns: Type Description FrozenSet [ Site ] FrozenSet[Site]: Set of Sites for all observations.","title":"sites()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.subgroup_ids","text":"Get the ids for all the sub-groups inside. Returns: Type Description FrozenSet [ GroupID ] FrozenSet[GroupID]: Set of GroupID values.","title":"subgroup_ids()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.Group.wavelengths","text":"Returns: Type Description FrozenSet [ float ] FrozenSet[float]: A set of wavelengths.","title":"wavelengths()"},{"location":"docs/lucupy/minimodel/group/#lucupy.minimodel.group.OrGroup","text":"Bases: Group The concrete implementation of an OR group. The restrictions on an OR group is that it must explicitly require not all of its children to be observed.","title":"OrGroup"},{"location":"docs/lucupy/minimodel/magnitude/","text":"Magnitude dataclass A magnitude value in a particular band. Attributes: Name Type Description band MagnitudeBands value float error float Default to None. MagnitudeBand dataclass They are fully enumerated in MagnitudeBands, so they should be looked up by name there. THIS CLASS SHOULD NOT BE INSTANTIATED. Values for center and width are specified in microns. Attributes: Name Type Description name str center float width float system MagnitudeSystem Default to MagnitudeSystem.VEGA . description str Default to None. MagnitudeBands Bases: Enum It is unconventional to use lowercase characters in an enum, but to differentiate them from the uppercase magnitude bands, we must. Look up the MagnitudeBand from this Enum as follows: MagnitudeBands[name] MagnitudeSystem Bases: Enum List of magnitude systems associated with magnitude bands. Members VEGA AB JY","title":"magnitude"},{"location":"docs/lucupy/minimodel/magnitude/#lucupy.minimodel.magnitude.Magnitude","text":"A magnitude value in a particular band. Attributes: Name Type Description band MagnitudeBands value float error float Default to None.","title":"Magnitude"},{"location":"docs/lucupy/minimodel/magnitude/#lucupy.minimodel.magnitude.MagnitudeBand","text":"They are fully enumerated in MagnitudeBands, so they should be looked up by name there. THIS CLASS SHOULD NOT BE INSTANTIATED. Values for center and width are specified in microns. Attributes: Name Type Description name str center float width float system MagnitudeSystem Default to MagnitudeSystem.VEGA . description str Default to None.","title":"MagnitudeBand"},{"location":"docs/lucupy/minimodel/magnitude/#lucupy.minimodel.magnitude.MagnitudeBands","text":"Bases: Enum It is unconventional to use lowercase characters in an enum, but to differentiate them from the uppercase magnitude bands, we must. Look up the MagnitudeBand from this Enum as follows: MagnitudeBands[name]","title":"MagnitudeBands"},{"location":"docs/lucupy/minimodel/magnitude/#lucupy.minimodel.magnitude.MagnitudeSystem","text":"Bases: Enum List of magnitude systems associated with magnitude bands. Members VEGA AB JY","title":"MagnitudeSystem"},{"location":"docs/lucupy/minimodel/observation/","text":"Observation dataclass Representation of an observation. Non-obvious fields are documented below. Attributes: Name Type Description id ObservationID should represent the observation's ID, e.g. GN-2018B-Q-101-123. internal_id str is the key associated with the observation order int refers to the order of the observation in either its group or the program title str site site the Site in which the Observation has to be done. status ObservationStatus active bool Indicates if the Observation is active or not. priority(Priority) bool Priority of the Observation. Affects the scoring. setuptime_type(SetupTimeType) bool When doing / resuming an Observation, indicates if a reacquisition, a full setup or just nothing has to be done. acq_overhead timedelta Time overhead for acquisition. obs_class ObservationClass Type of Observation. targets List [ Target ] should contain a complete list of all targets associated with the observation, with the base being in the first position guiding Mapping [ Resource , Target ] is a map between guide probe resources and their targets. sequence List [ Atom ] Sequence of Atoms that describe the observation. constraints Constraints Some observations do not have constraints, e.g. GN-208A-FT-103-6. too_type TooType Default to None. __eq__ ( other ) We override the equality checker created by @dataclass to temporarily skip sequence comparison in test cases until the atom creation process is finish. __len__ () This is to treat observations the same as groups and is a bit of a hack. Observations are to be placed in AND Groups of size 1 for scheduling purposes. base_target () Returns: Type Description Optional [ Target ] Get the base target for this Observation if it has one, and None otherwise. constraints () Returns: Type Description FrozenSet [ Constraints ] A set of the constraints required by the observation. FrozenSet [ Constraints ] In the case of an observation, this is just the (optional) constraints. exec_time () Returns: Type Description timedelta Total execution time for the program, which is the sum across atoms and the acquisition overhead. instrument () Returns: Type Description Optional [ Resource ] A resource that is an instrument, if one exists. There should be only one. partner_used () We roll this information up from the atoms as it will be calculated during the Optimizer algorithm. Note that it is also available directly from the OCS, which is used to populate the time allocation. Returns: Type Description timedelta With the time program used. program_used () We roll this information up from the atoms as it will be calculated during the Optimizer algorithm. Note that it is also available directly from the OCS, which is used to populate the time allocation. Returns: Type Description timedelta With the time program used. required_resources () Returns: Type Description FrozenSet [ Resource ] The required resources for an observation based on the sequence's needs. show ( depth = 1 ) Print content of the Observation. Parameters: Name Type Description Default depth int depth of the separator. Defaults to 1. 1 total_used () Returns: Type Description timedelta Total program time used: includes program time and partner time. wavelengths () Returns: Type Description FrozenSet [ float ] The set of wavelengths included in the sequence. ObservationClass Bases: IntEnum The class of an observation. Note that the order of these is specific and deliberate: they are listed in preference order for observation classes, and hence, should not be rearranged. These correspond to the values in the OCS when made uppercase. Members SCIENCE PROGCAL PARTNERCAL ACQ ACQCAL DAYCAL ObservationStatus Bases: IntEnum The status of an observation as indicated in the Observing Tool / ODB. Members NEW INCLUDED PROPOSED APPROVED FOR_REVIEW: Not in original mini-model description, but returned by OCS. ON_HOLD READY ONGOING OBSERVED INACTIVE PHASE2 Priority Bases: IntEnum An observation's priority. Note that these are ordered specifically so that we can compare them. Members LOW MEDIUM HIGH SetupTimeType Bases: IntEnum The setup time type for an observation. Members NONE REACQUISITION FULL","title":"observation"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation","text":"Representation of an observation. Non-obvious fields are documented below. Attributes: Name Type Description id ObservationID should represent the observation's ID, e.g. GN-2018B-Q-101-123. internal_id str is the key associated with the observation order int refers to the order of the observation in either its group or the program title str site site the Site in which the Observation has to be done. status ObservationStatus active bool Indicates if the Observation is active or not. priority(Priority) bool Priority of the Observation. Affects the scoring. setuptime_type(SetupTimeType) bool When doing / resuming an Observation, indicates if a reacquisition, a full setup or just nothing has to be done. acq_overhead timedelta Time overhead for acquisition. obs_class ObservationClass Type of Observation. targets List [ Target ] should contain a complete list of all targets associated with the observation, with the base being in the first position guiding Mapping [ Resource , Target ] is a map between guide probe resources and their targets. sequence List [ Atom ] Sequence of Atoms that describe the observation. constraints Constraints Some observations do not have constraints, e.g. GN-208A-FT-103-6. too_type TooType Default to None.","title":"Observation"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.__eq__","text":"We override the equality checker created by @dataclass to temporarily skip sequence comparison in test cases until the atom creation process is finish.","title":"__eq__()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.__len__","text":"This is to treat observations the same as groups and is a bit of a hack. Observations are to be placed in AND Groups of size 1 for scheduling purposes.","title":"__len__()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.base_target","text":"Returns: Type Description Optional [ Target ] Get the base target for this Observation if it has one, and None otherwise.","title":"base_target()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.constraints","text":"Returns: Type Description FrozenSet [ Constraints ] A set of the constraints required by the observation. FrozenSet [ Constraints ] In the case of an observation, this is just the (optional) constraints.","title":"constraints()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.exec_time","text":"Returns: Type Description timedelta Total execution time for the program, which is the sum across atoms and the acquisition overhead.","title":"exec_time()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.instrument","text":"Returns: Type Description Optional [ Resource ] A resource that is an instrument, if one exists. There should be only one.","title":"instrument()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.partner_used","text":"We roll this information up from the atoms as it will be calculated during the Optimizer algorithm. Note that it is also available directly from the OCS, which is used to populate the time allocation. Returns: Type Description timedelta With the time program used.","title":"partner_used()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.program_used","text":"We roll this information up from the atoms as it will be calculated during the Optimizer algorithm. Note that it is also available directly from the OCS, which is used to populate the time allocation. Returns: Type Description timedelta With the time program used.","title":"program_used()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.required_resources","text":"Returns: Type Description FrozenSet [ Resource ] The required resources for an observation based on the sequence's needs.","title":"required_resources()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.show","text":"Print content of the Observation. Parameters: Name Type Description Default depth int depth of the separator. Defaults to 1. 1","title":"show()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.total_used","text":"Returns: Type Description timedelta Total program time used: includes program time and partner time.","title":"total_used()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Observation.wavelengths","text":"Returns: Type Description FrozenSet [ float ] The set of wavelengths included in the sequence.","title":"wavelengths()"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.ObservationClass","text":"Bases: IntEnum The class of an observation. Note that the order of these is specific and deliberate: they are listed in preference order for observation classes, and hence, should not be rearranged. These correspond to the values in the OCS when made uppercase. Members SCIENCE PROGCAL PARTNERCAL ACQ ACQCAL DAYCAL","title":"ObservationClass"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.ObservationStatus","text":"Bases: IntEnum The status of an observation as indicated in the Observing Tool / ODB. Members NEW INCLUDED PROPOSED APPROVED FOR_REVIEW: Not in original mini-model description, but returned by OCS. ON_HOLD READY ONGOING OBSERVED INACTIVE PHASE2","title":"ObservationStatus"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.Priority","text":"Bases: IntEnum An observation's priority. Note that these are ordered specifically so that we can compare them. Members LOW MEDIUM HIGH","title":"Priority"},{"location":"docs/lucupy/minimodel/observation/#lucupy.minimodel.observation.SetupTimeType","text":"Bases: IntEnum The setup time type for an observation. Members NONE REACQUISITION FULL","title":"SetupTimeType"},{"location":"docs/lucupy/minimodel/observationmode/","text":"ObservationMode Bases: str , Enum Observation Mode Members UNKNOWN = 'unknown' IMAGING = 'imaging' LONGSLIT = 'longslit' IFU = 'ifu' MOS = 'mos' XD = 'xd' CORON = 'coron' NRM = 'nrm'","title":"observationmode"},{"location":"docs/lucupy/minimodel/observationmode/#lucupy.minimodel.observationmode.ObservationMode","text":"Bases: str , Enum Observation Mode Members UNKNOWN = 'unknown' IMAGING = 'imaging' LONGSLIT = 'longslit' IFU = 'ifu' MOS = 'mos' XD = 'xd' CORON = 'coron' NRM = 'nrm'","title":"ObservationMode"},{"location":"docs/lucupy/minimodel/program/","text":"Band Bases: IntEnum Program band. Program dataclass Representation of a program. The FUZZY_BOUNDARY is a constant that allows for a fuzzy boundary for a program's start and end times. show () Print content of the Program. ProgramMode Bases: IntEnum Main operational mode, which is one of: * Queue * Classical * Priority Visitor (hybrid mode between queue and classical) ProgramType dataclass Represents the information encompassing the type of program. * abbreviation: the code used by the program type (e.g. Q, C, FT, LP) * name: user readable representation of the program type * is_science: indicates if this program type is a science program NOTE that ProgramType instances should NEVER be explicitly created. All of the valid ProgramType instances are contained in the ProgramTypes enum and should be accessed from there. ProgramTypes Bases: Enum A complete list of the ProgramType instances used by Gemini. As mentioned in ProgramType, ProgramType should never be instantiated outside of this enum: instead, ProgramType instances should be retrieved from here.","title":"program"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.Band","text":"Bases: IntEnum Program band.","title":"Band"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.Program","text":"Representation of a program. The FUZZY_BOUNDARY is a constant that allows for a fuzzy boundary for a program's start and end times.","title":"Program"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.Program.show","text":"Print content of the Program.","title":"show()"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.ProgramMode","text":"Bases: IntEnum Main operational mode, which is one of: * Queue * Classical * Priority Visitor (hybrid mode between queue and classical)","title":"ProgramMode"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.ProgramType","text":"Represents the information encompassing the type of program. * abbreviation: the code used by the program type (e.g. Q, C, FT, LP) * name: user readable representation of the program type * is_science: indicates if this program type is a science program NOTE that ProgramType instances should NEVER be explicitly created. All of the valid ProgramType instances are contained in the ProgramTypes enum and should be accessed from there.","title":"ProgramType"},{"location":"docs/lucupy/minimodel/program/#lucupy.minimodel.program.ProgramTypes","text":"Bases: Enum A complete list of the ProgramType instances used by Gemini. As mentioned in ProgramType, ProgramType should never be instantiated outside of this enum: instead, ProgramType instances should be retrieved from here.","title":"ProgramTypes"},{"location":"docs/lucupy/minimodel/qastate/","text":"QAState Bases: IntEnum These correspond to the QA States in the OCS for Observations. Entries in the obs log should be made uppercase for lookups into this enum. PASS is not in original mini-model description, but returned by OCS. Members NONE UNDEFINED FAIL USABLE PASS CHECK","title":"qastate"},{"location":"docs/lucupy/minimodel/qastate/#lucupy.minimodel.qastate.QAState","text":"Bases: IntEnum These correspond to the QA States in the OCS for Observations. Entries in the obs log should be made uppercase for lookups into this enum. PASS is not in original mini-model description, but returned by OCS. Members NONE UNDEFINED FAIL USABLE PASS CHECK","title":"QAState"},{"location":"docs/lucupy/minimodel/resource/","text":"Resource dataclass This is a general observatory resource. It can consist of a guider, an instrument, or a part of an instrument, or even a personnel and is used to determine what observations can be performed at a given time based on the resource availability. Attributes: Name Type Description id str Resource id or name. description str Short description.","title":"resource"},{"location":"docs/lucupy/minimodel/resource/#lucupy.minimodel.resource.Resource","text":"This is a general observatory resource. It can consist of a guider, an instrument, or a part of an instrument, or even a personnel and is used to determine what observations can be performed at a given time based on the resource availability. Attributes: Name Type Description id str Resource id or name. description str Short description.","title":"Resource"},{"location":"docs/lucupy/minimodel/semester/","text":"Semester dataclass A semester is a period for which programs may be submitted to Gemini. Attributes: Name Type Description year int A four digit year. half SemesterHalf Two semesters during each year, indicated by the SemesterHalf. SemesterHalf Bases: str , Enum Gemini typically schedules programs for two semesters per year, namely A and B. For other observatories, this logic might have to be substantially changed. Members A = 'A' B = 'B'","title":"semester"},{"location":"docs/lucupy/minimodel/semester/#lucupy.minimodel.semester.Semester","text":"A semester is a period for which programs may be submitted to Gemini. Attributes: Name Type Description year int A four digit year. half SemesterHalf Two semesters during each year, indicated by the SemesterHalf.","title":"Semester"},{"location":"docs/lucupy/minimodel/semester/#lucupy.minimodel.semester.SemesterHalf","text":"Bases: str , Enum Gemini typically schedules programs for two semesters per year, namely A and B. For other observatories, this logic might have to be substantially changed. Members A = 'A' B = 'B'","title":"SemesterHalf"},{"location":"docs/lucupy/minimodel/site/","text":"This will have to be customized by a given observatory if used independently of Gemini. Site Bases: Enum The sites belonging to the observatory using the Scheduler. Attributes: Name Type Description GN Gemini North (568@399) GS Gemini South (I11@399)","title":"site"},{"location":"docs/lucupy/minimodel/site/#lucupy.minimodel.site.Site","text":"Bases: Enum The sites belonging to the observatory using the Scheduler. Attributes: Name Type Description GN Gemini North (568@399) GS Gemini South (I11@399)","title":"Site"},{"location":"docs/lucupy/minimodel/target/","text":"GuideSpeed Bases: IntEnum How quickly a guider can guide on a guide star. Members SLOW MEDIUM FAST NonsiderealTarget dataclass Bases: Target For a NonsiderealTarget, we have a HORIZONS designation to indicate the lookup information, a tag to determine the type of target, and arrays of ephemerides to specify the position. Attributes: Name Type Description des str Horizon designation tag TargetTag TargetTag ra npt . NDArray [ float ] Right Ascension dec npt . NDArray [ float ] Declination SiderealTarget dataclass Bases: Target For a SiderealTarget, we have an RA and Dec and then proper motion information to calculate the exact position. RA and Dec should be specified in decimal degrees. Proper motion must be specified in milliarcseconds / year. Epoch must be the decimal year. NOTE: The proper motion adjusted coordinates can be found in the TargetInfo in coord. Attributes: Name Type Description ra float Right Ascension dec float Declination pm_ra float Proper motion of the right ascension component. pm_dec float Proper motion of the declination component. epoch float The epoch in which the ra / dec were measured. Target dataclass Bases: ABC Basic target information. Attributes: Name Type Description - name TargetName - magnitudes Set[Magnitude] - type TargetType guide_speed () Calculate the guide speed for this target. TargetTag Bases: Enum A tag used by nonsidereal targets to indicate their type. TargetType Bases: Enum The type associated with a target in an observation. Members BASE USER BLIND_OFFSET OFF_AXIS TUNING_STAR GUIDESTAR OTHER","title":"target"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.GuideSpeed","text":"Bases: IntEnum How quickly a guider can guide on a guide star. Members SLOW MEDIUM FAST","title":"GuideSpeed"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.NonsiderealTarget","text":"Bases: Target For a NonsiderealTarget, we have a HORIZONS designation to indicate the lookup information, a tag to determine the type of target, and arrays of ephemerides to specify the position. Attributes: Name Type Description des str Horizon designation tag TargetTag TargetTag ra npt . NDArray [ float ] Right Ascension dec npt . NDArray [ float ] Declination","title":"NonsiderealTarget"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.SiderealTarget","text":"Bases: Target For a SiderealTarget, we have an RA and Dec and then proper motion information to calculate the exact position. RA and Dec should be specified in decimal degrees. Proper motion must be specified in milliarcseconds / year. Epoch must be the decimal year. NOTE: The proper motion adjusted coordinates can be found in the TargetInfo in coord. Attributes: Name Type Description ra float Right Ascension dec float Declination pm_ra float Proper motion of the right ascension component. pm_dec float Proper motion of the declination component. epoch float The epoch in which the ra / dec were measured.","title":"SiderealTarget"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.Target","text":"Bases: ABC Basic target information. Attributes: Name Type Description - name TargetName - magnitudes Set[Magnitude] - type TargetType","title":"Target"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.Target.guide_speed","text":"Calculate the guide speed for this target.","title":"guide_speed()"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.TargetTag","text":"Bases: Enum A tag used by nonsidereal targets to indicate their type.","title":"TargetTag"},{"location":"docs/lucupy/minimodel/target/#lucupy.minimodel.target.TargetType","text":"Bases: Enum The type associated with a target in an observation. Members BASE USER BLIND_OFFSET OFF_AXIS TUNING_STAR GUIDESTAR OTHER","title":"TargetType"},{"location":"docs/lucupy/minimodel/timeallocation/","text":"TimeAccountingCode Bases: str , Enum The time accounting codes for the possible partner submissions or internal program types used at Gemini, also known as categories. This will have to be customized for a given observatory if used independently of Gemini. TimeAllocation dataclass Time allocation information for a given category for a program. Programs may be sponsored by multiple categories with different amounts of time awarded. This class maintains information about the time awarded and the time that has been used, divided between program time and partner calibration time. The time used is calculated as a ratio of the awarded time for this category to the total time awarded to the program. Attribute category (TimeAccountingCode): program_awarded (timedelta): partner_awarded (timedelta): program_used (timedelta): partner_used (timedelta):","title":"timeallocation"},{"location":"docs/lucupy/minimodel/timeallocation/#lucupy.minimodel.timeallocation.TimeAccountingCode","text":"Bases: str , Enum The time accounting codes for the possible partner submissions or internal program types used at Gemini, also known as categories. This will have to be customized for a given observatory if used independently of Gemini.","title":"TimeAccountingCode"},{"location":"docs/lucupy/minimodel/timeallocation/#lucupy.minimodel.timeallocation.TimeAllocation","text":"Time allocation information for a given category for a program. Programs may be sponsored by multiple categories with different amounts of time awarded. This class maintains information about the time awarded and the time that has been used, divided between program time and partner calibration time. The time used is calculated as a ratio of the awarded time for this category to the total time awarded to the program. Attribute category (TimeAccountingCode): program_awarded (timedelta): partner_awarded (timedelta): program_used (timedelta): partner_used (timedelta):","title":"TimeAllocation"},{"location":"docs/lucupy/minimodel/timingwindow/","text":"TimingWindow dataclass Representation of timing windows in the mini-model. Attributes: Name Type Description start datetime When a timing window begins. duration timedelta For infinite duration, set duration to timedelta.max. repeat int -1 means forever repeating, 0 means non-repeating. period timedelta None should be used if repeat < 1.","title":"timingwindow"},{"location":"docs/lucupy/minimodel/timingwindow/#lucupy.minimodel.timingwindow.TimingWindow","text":"Representation of timing windows in the mini-model. Attributes: Name Type Description start datetime When a timing window begins. duration timedelta For infinite duration, set duration to timedelta.max. repeat int -1 means forever repeating, 0 means non-repeating. period timedelta None should be used if repeat < 1.","title":"TimingWindow"},{"location":"docs/lucupy/minimodel/too/","text":"TooType Bases: IntEnum The target-of-opportunity type for a program and for an observation. These are ordered specifically so that we can compare them. The INTERRUPT is considered the highest level of TooType, followed by RAPID, and then STANDARD. Thus, a Program with a RAPID type, for example, can contain RAPID and STANDARD Observations, but not INTERRUPT ones. The values and ordering on them should NOT be changed as this will break functionality. Members STANDARD RAPID INTERRUPT","title":"too"},{"location":"docs/lucupy/minimodel/too/#lucupy.minimodel.too.TooType","text":"Bases: IntEnum The target-of-opportunity type for a program and for an observation. These are ordered specifically so that we can compare them. The INTERRUPT is considered the highest level of TooType, followed by RAPID, and then STANDARD. Thus, a Program with a RAPID type, for example, can contain RAPID and STANDARD Observations, but not INTERRUPT ones. The values and ordering on them should NOT be changed as this will break functionality. Members STANDARD RAPID INTERRUPT","title":"TooType"},{"location":"docs/lucupy/observatory/","text":"Observatory is used to change behavior on some of the structures and components in the Scheduler service and others. Right now only Gemini Observatory is implemented but more should come. For new implementations, see Abstract.","title":"observatory"},{"location":"docs/lucupy/observatory/abstract/","text":"ObservatoryProperties Bases: ABC Observatory-specific methods. These are not tied to other components or structures, and allow computations to be implemented in one place. acquisition_time ( resource , observation_mode ) staticmethod Given a resource, check if it is an instrument, and if so, lookup the acquisition time for the specified mode. Parameters: Name Type Description Default resource Resource A resource that should be an Instrument. required observation_mode ObservationMode The observation mode to be used. required Returns: Type Description Optional [ timedelta ] Optional[timedelta]: The acquisition time for the instrument in that specific mode. determine_standard_time ( resources , wavelengths , modes , cal_length ) staticmethod Determine standard time for a specific Observatory Parameters: Name Type Description Default resources FrozenSet Set of Resources(instruments, mask, etc). required wavelengths FrozenSet [ float ] An array of Wavelengths to be observed. required modes FrozenSet The different modes of observation. required cal_length int The length (in seconds) of a calibration. required Returns: Name Type Description Time Time Value(s) of standard time is_instrument ( resource ) staticmethod Determine if the given resource is an instrument or not. Parameters: Name Type Description Default resource Resource An instrument. required Returns: Name Type Description bool bool True is the resource is an instrument of the Observatory, otherwise False. set_properties () staticmethod Set properties for an specific Observatory Raises: Type Description ValueError Illegal properties value.","title":"abstract"},{"location":"docs/lucupy/observatory/abstract/#lucupy.observatory.abstract.ObservatoryProperties","text":"Bases: ABC Observatory-specific methods. These are not tied to other components or structures, and allow computations to be implemented in one place.","title":"ObservatoryProperties"},{"location":"docs/lucupy/observatory/abstract/#lucupy.observatory.abstract.ObservatoryProperties.acquisition_time","text":"Given a resource, check if it is an instrument, and if so, lookup the acquisition time for the specified mode. Parameters: Name Type Description Default resource Resource A resource that should be an Instrument. required observation_mode ObservationMode The observation mode to be used. required Returns: Type Description Optional [ timedelta ] Optional[timedelta]: The acquisition time for the instrument in that specific mode.","title":"acquisition_time()"},{"location":"docs/lucupy/observatory/abstract/#lucupy.observatory.abstract.ObservatoryProperties.determine_standard_time","text":"Determine standard time for a specific Observatory Parameters: Name Type Description Default resources FrozenSet Set of Resources(instruments, mask, etc). required wavelengths FrozenSet [ float ] An array of Wavelengths to be observed. required modes FrozenSet The different modes of observation. required cal_length int The length (in seconds) of a calibration. required Returns: Name Type Description Time Time Value(s) of standard time","title":"determine_standard_time()"},{"location":"docs/lucupy/observatory/abstract/#lucupy.observatory.abstract.ObservatoryProperties.is_instrument","text":"Determine if the given resource is an instrument or not. Parameters: Name Type Description Default resource Resource An instrument. required Returns: Name Type Description bool bool True is the resource is an instrument of the Observatory, otherwise False.","title":"is_instrument()"},{"location":"docs/lucupy/observatory/abstract/#lucupy.observatory.abstract.ObservatoryProperties.set_properties","text":"Set properties for an specific Observatory Raises: Type Description ValueError Illegal properties value.","title":"set_properties()"},{"location":"docs/lucupy/observatory/gemini/","text":"","title":"gemini"},{"location":"docs/lucupy/observatory/gemini/geminiobservation/","text":"GeminiObservation Bases: Observation A Gemini-specific extension of the Observation class. total_used () Override total_used method from Observation. Adds IGRINS calibration time using a decorator. Returns: Name Type Description timedelta timedelta Total used time.","title":"geminiobservation"},{"location":"docs/lucupy/observatory/gemini/geminiobservation/#lucupy.observatory.gemini.geminiobservation.GeminiObservation","text":"Bases: Observation A Gemini-specific extension of the Observation class.","title":"GeminiObservation"},{"location":"docs/lucupy/observatory/gemini/geminiobservation/#lucupy.observatory.gemini.geminiobservation.GeminiObservation.total_used","text":"Override total_used method from Observation. Adds IGRINS calibration time using a decorator. Returns: Name Type Description timedelta timedelta Total used time.","title":"total_used()"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/","text":"GeminiProperties Bases: ObservatoryProperties Implementation of ObservatoryCalculations specific to Gemini. Instruments Bases: Enum Gemini-specific instruments. acquisition_time ( resource , observation_mode ) staticmethod summary Parameters: Name Type Description Default resource Resource Instruments used. required observation_mode ObservationMode Observation mode. required Returns: Type Description Optional [ timedelta ] Optional[timedelta]: description determine_standard_time ( resources , wavelengths , modes , cal_length ) staticmethod Determine the standard star time required for Gemini. Parameters: Name Type Description Default resources FrozenSet [ Resource ] Instruments to be used. required wavelengths FrozenSet [ float ] Wavelengths to be observed. required modes FrozenSet [ ObservationMode ] Observation modes. required cal_length int The specific length of a calibration. required Returns: Name Type Description Time Time description Todo We may only want to include specific resources, in which case, modify Instruments above to be StandardInstruments. is_instrument ( resource ) staticmethod Checks if the resource is a Gemini instrument. Parameters: Name Type Description Default resource Resource A resource to be checked. required Returns: Name Type Description bool bool True if resource is a Gemini instrument.","title":"geminiproperties"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/#lucupy.observatory.gemini.geminiproperties.GeminiProperties","text":"Bases: ObservatoryProperties Implementation of ObservatoryCalculations specific to Gemini.","title":"GeminiProperties"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/#lucupy.observatory.gemini.geminiproperties.GeminiProperties.Instruments","text":"Bases: Enum Gemini-specific instruments.","title":"Instruments"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/#lucupy.observatory.gemini.geminiproperties.GeminiProperties.acquisition_time","text":"summary Parameters: Name Type Description Default resource Resource Instruments used. required observation_mode ObservationMode Observation mode. required Returns: Type Description Optional [ timedelta ] Optional[timedelta]: description","title":"acquisition_time()"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/#lucupy.observatory.gemini.geminiproperties.GeminiProperties.determine_standard_time","text":"Determine the standard star time required for Gemini. Parameters: Name Type Description Default resources FrozenSet [ Resource ] Instruments to be used. required wavelengths FrozenSet [ float ] Wavelengths to be observed. required modes FrozenSet [ ObservationMode ] Observation modes. required cal_length int The specific length of a calibration. required Returns: Name Type Description Time Time description Todo We may only want to include specific resources, in which case, modify Instruments above to be StandardInstruments.","title":"determine_standard_time()"},{"location":"docs/lucupy/observatory/gemini/geminiproperties/#lucupy.observatory.gemini.geminiproperties.GeminiProperties.is_instrument","text":"Checks if the resource is a Gemini instrument. Parameters: Name Type Description Default resource Resource A resource to be checked. required Returns: Name Type Description bool bool True if resource is a Gemini instrument.","title":"is_instrument()"},{"location":"docs/lucupy/sky/","text":"","title":"sky"},{"location":"docs/lucupy/sky/altitude/","text":"Altitude above ( dec , ha , lat ) staticmethod Compute altitude above horizon, azimuth, and parallactic angle. The parallactic angle is the position angle of the arc between the object and the zenith, i.e. the position angle that points 'straight up' when you're looking at an object. It is important for atmospheric refraction and dispersion compensation, which Filippenko discusses ( 1982PASP...94..715F ). Does not take small effects into account (polar motion, nutation, whatever) so is lighter weight than the astropy equivalents. Filippenko's expression for the parallactic angle leaves it to the user to select the correct root of an inverse trig function; this is handled automatically here by fully solving the astronomical triangle. The astropy altaz transformation depends on the 3 Mbyte download from USNO to find the lst, so here is a stripped down version. Arguments are all assumed to be Angles so they don't need to be converted to radians; the dec is assumed to be in equinox of date to avoid We get the parallactic angle almost for since we have ha, colat, and altitude. Parameters: Name Type Description Default dec AngleParam Declination required ha AngleParam Hour angle (spherical astronomy) of the position, positive westward required lat AngleParam Latitude of site. required Returns: Type Description Tuple [ Angle , Angle , Angle ] tuple of (altitude, azimuth, parallactic), all of which are Angles.","title":"altitude"},{"location":"docs/lucupy/sky/altitude/#lucupy.sky.altitude.Altitude","text":"","title":"Altitude"},{"location":"docs/lucupy/sky/altitude/#lucupy.sky.altitude.Altitude.above","text":"Compute altitude above horizon, azimuth, and parallactic angle. The parallactic angle is the position angle of the arc between the object and the zenith, i.e. the position angle that points 'straight up' when you're looking at an object. It is important for atmospheric refraction and dispersion compensation, which Filippenko discusses ( 1982PASP...94..715F ). Does not take small effects into account (polar motion, nutation, whatever) so is lighter weight than the astropy equivalents. Filippenko's expression for the parallactic angle leaves it to the user to select the correct root of an inverse trig function; this is handled automatically here by fully solving the astronomical triangle. The astropy altaz transformation depends on the 3 Mbyte download from USNO to find the lst, so here is a stripped down version.","title":"above()"},{"location":"docs/lucupy/sky/altitude/#lucupy.sky.altitude.Altitude.above--arguments-are-all-assumed-to-be-angles-so-they-dont-need-to-be-converted-to-radians","text":"the dec is assumed to be in equinox of date to avoid","title":"Arguments are all assumed to be Angles so they don't need to be converted to radians;"},{"location":"docs/lucupy/sky/altitude/#lucupy.sky.altitude.Altitude.above--we-get-the-parallactic-angle-almost-for-since-we-have-ha-colat-and-altitude","text":"Parameters: Name Type Description Default dec AngleParam Declination required ha AngleParam Hour angle (spherical astronomy) of the position, positive westward required lat AngleParam Latitude of site. required Returns: Type Description Tuple [ Angle , Angle , Angle ] tuple of (altitude, azimuth, parallactic), all of which are Angles.","title":"We get the parallactic angle almost for since we have ha, colat, and altitude."},{"location":"docs/lucupy/sky/brightness/","text":"calculate_sky_brightness ( moon_phase_angle , target_moon_angdist , earth_moon_dist , moon_zenith_distang , target_zenith_distang , sun_zenith_distang , verbose = False ) Calculate sky brightness based on formulas from Krisciunas & Schaefer 1991. Uses array processing Parameters: Name Type Description Default moon_phase_angle Angle Moon phase angles in degrees required target_moon_angdist Distance Angular distances between target and moon required earth_moon_dist Distance Distances from the Earth to the Moon required moon_zenith_distang Angle Moon zenith distance angles required target_zenith_distang Angle Target zenith distance angles required sun_zenith_distang Angle Sun zenith distance angles required verbose bool Verbose output flag False Returns: Type Description npt . NDArray [ float ] array of float: Numpy array of sky background magnitudes at target location calculate_sky_brightness_qpt ( moon_phase_angle , target_moon_angdist , moon_zenith_distang , target_zenith_distang , sun_zenith_distang , verbose = False ) Calculate sky brightness based on formulas from Krisciunas & Schaefer 1991 Parameters: Name Type Description Default moon_phase_angle Quantity Moon phase angle at solar midnight in degrees required target_moon_angdist Quantity Numpy array of angular distances between target and moon required moon_zenith_distang Quantity Numpy array of Moon zenith distance angles required target_zenith_distang Quantity Numpy array of target zenith distance angles required sun_zenith_distang Quantity Numpy array of Sun zenith distance angles required verbose bool Verbose output flag False Returns: Name Type Description float npt . NDArray [ float ] Numpy array of sky background magnitudes at target location convert_to_sky_background ( sb ) Convert visible sky background magnitudes to decimal conditions. Parameters: Name Type Description Default sb npt . NDArray [ float ] TargetInfo object with time dependent vsb quantities required Return npt.NDArray[SkyBackground]: Sky background condition values Example Conversion scheme: 1.0 | vsb <= 19.61 0.8 | 19.61 < vsb <= 20.78 0.5 | 20.78 < vsb <= 21.37 0.2 | 21.37 < vsb","title":"brightness"},{"location":"docs/lucupy/sky/brightness/#lucupy.sky.brightness.calculate_sky_brightness","text":"Calculate sky brightness based on formulas from Krisciunas & Schaefer 1991. Uses array processing Parameters: Name Type Description Default moon_phase_angle Angle Moon phase angles in degrees required target_moon_angdist Distance Angular distances between target and moon required earth_moon_dist Distance Distances from the Earth to the Moon required moon_zenith_distang Angle Moon zenith distance angles required target_zenith_distang Angle Target zenith distance angles required sun_zenith_distang Angle Sun zenith distance angles required verbose bool Verbose output flag False Returns: Type Description npt . NDArray [ float ] array of float: Numpy array of sky background magnitudes at target location","title":"calculate_sky_brightness()"},{"location":"docs/lucupy/sky/brightness/#lucupy.sky.brightness.calculate_sky_brightness_qpt","text":"Calculate sky brightness based on formulas from Krisciunas & Schaefer 1991 Parameters: Name Type Description Default moon_phase_angle Quantity Moon phase angle at solar midnight in degrees required target_moon_angdist Quantity Numpy array of angular distances between target and moon required moon_zenith_distang Quantity Numpy array of Moon zenith distance angles required target_zenith_distang Quantity Numpy array of target zenith distance angles required sun_zenith_distang Quantity Numpy array of Sun zenith distance angles required verbose bool Verbose output flag False Returns: Name Type Description float npt . NDArray [ float ] Numpy array of sky background magnitudes at target location","title":"calculate_sky_brightness_qpt()"},{"location":"docs/lucupy/sky/brightness/#lucupy.sky.brightness.convert_to_sky_background","text":"Convert visible sky background magnitudes to decimal conditions. Parameters: Name Type Description Default sb npt . NDArray [ float ] TargetInfo object with time dependent vsb quantities required Return npt.NDArray[SkyBackground]: Sky background condition values Example Conversion scheme: 1.0 | vsb <= 19.61 0.8 | 19.61 < vsb <= 20.78 0.5 | 20.78 < vsb <= 21.37 0.2 | 21.37 < vsb","title":"convert_to_sky_background()"},{"location":"docs/lucupy/sky/constants/","text":"Constants that are used here and there. Some are Quantities, others are just floats. Not all are used. The planet-coefs are for series expansions for the phase functions of the planets, used in predicting apparent magnitude. See code.","title":"constants"},{"location":"docs/lucupy/sky/events/","text":"night_events ( time , location , localtzone ) Compute phenomena for a given night. This is mostly a testbed that prints results directly. Parameters: Name Type Description Default time If before noon, events of previous night are computed. required location EarthLocation Earth Location required localtzone timezone Timezone object. required Returns: Name Type Description Tuple Tuple [ Time , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray ] A 7D tuple with either a ScalarOrNDArray (Check type for specific).","title":"events"},{"location":"docs/lucupy/sky/events/#lucupy.sky.events.night_events","text":"Compute phenomena for a given night. This is mostly a testbed that prints results directly. Parameters: Name Type Description Default time If before noon, events of previous night are computed. required location EarthLocation Earth Location required localtzone timezone Timezone object. required Returns: Name Type Description Tuple Tuple [ Time , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray , TimeScalarOrNDArray ] A 7D tuple with either a ScalarOrNDArray (Check type for specific).","title":"night_events()"},{"location":"docs/lucupy/sky/moon/","text":"Moon Interface for night events for the moon an other calculations. To use this is required to chain the at method at the beginning. If not unhandled errors would happen. Attributes: Name Type Description time Time regular Time in UTC. time_jd Time Time on Julian day. time_ttjd Time Time on terrestrial time and Julian day. scalar_input bool Check if input is an array or a scalar. self.pie float Not a lemon one! Variable for location calculation. self.lambd float Variable for location calculation. self.beta float Variable for location calculation. accurate_location ( obs ) Compute topocentric location and distance of moon to better accuracy. This is good to about 0.01 degrees. Parameters: Name Type Description Default obs EarthLocation location on earth. required Returns: Type Description Tuple [ SkyCoord , float ] Tuple[SkyCoord, float]: Moon coordinates and topographic distance. at ( time ) Set time values for other calculations. This method is meant to be called with: - location methods (either low or accurate). - time_by_altitude - rise_and_set Parameters: Name Type Description Default time Time Specific time. required Returns: Name Type Description Self Moon Same object for method chaining. low_precision_location ( obs ) This is the same as the high precision method, but with a different set of coefficients. The difference is small. Good to about 0.1 deg, from the 1992 Astronomical Almanac, p. D46. Note that input time is a float. Parameters: Name Type Description Default obs EarthLocation Earth location of the observation. required Returns: Type Description Tuple [ SkyCoord , float ] Tuple[SkyCoord, float]: Moon coordinates and topographic distance. rise_and_set ( location , midnight , set_alt , rise_alt ) Calculates rise and set for the Moon Parameters: Name Type Description Default location EarthLocation Earth location of the observer required midnight Time Midnight of that day as a Time object required set_alt Angle Altitude for the moonset required rise_alt Angle Altitude for the moonrise required Returns: Type Description Tuple [ Time , Time ] Tuple[Time, Time]: Moonrise and Moonset values, in that order. time_by_altitude ( alt , time_guess , location ) staticmethod Time at which moon passes a given altitude. This really does have to be iterated since the moon moves fairly quickly. Parameters: Name Type Description Default alt Angle If array, then must be the same length as time_guess desired altitude. required time_guess Initial guess; this needs to be fairly close. required location EarthLocation required Returns: Type Description Optional [ Time ] Optional[Time]: a Time, or None if non-convergent.","title":"moon"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon","text":"Interface for night events for the moon an other calculations. To use this is required to chain the at method at the beginning. If not unhandled errors would happen. Attributes: Name Type Description time Time regular Time in UTC. time_jd Time Time on Julian day. time_ttjd Time Time on terrestrial time and Julian day. scalar_input bool Check if input is an array or a scalar. self.pie float Not a lemon one! Variable for location calculation. self.lambd float Variable for location calculation. self.beta float Variable for location calculation.","title":"Moon"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon.accurate_location","text":"Compute topocentric location and distance of moon to better accuracy. This is good to about 0.01 degrees. Parameters: Name Type Description Default obs EarthLocation location on earth. required Returns: Type Description Tuple [ SkyCoord , float ] Tuple[SkyCoord, float]: Moon coordinates and topographic distance.","title":"accurate_location()"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon.at","text":"Set time values for other calculations. This method is meant to be called with: - location methods (either low or accurate). - time_by_altitude - rise_and_set Parameters: Name Type Description Default time Time Specific time. required Returns: Name Type Description Self Moon Same object for method chaining.","title":"at()"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon.low_precision_location","text":"This is the same as the high precision method, but with a different set of coefficients. The difference is small. Good to about 0.1 deg, from the 1992 Astronomical Almanac, p. D46. Note that input time is a float. Parameters: Name Type Description Default obs EarthLocation Earth location of the observation. required Returns: Type Description Tuple [ SkyCoord , float ] Tuple[SkyCoord, float]: Moon coordinates and topographic distance.","title":"low_precision_location()"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon.rise_and_set","text":"Calculates rise and set for the Moon Parameters: Name Type Description Default location EarthLocation Earth location of the observer required midnight Time Midnight of that day as a Time object required set_alt Angle Altitude for the moonset required rise_alt Angle Altitude for the moonrise required Returns: Type Description Tuple [ Time , Time ] Tuple[Time, Time]: Moonrise and Moonset values, in that order.","title":"rise_and_set()"},{"location":"docs/lucupy/sky/moon/#lucupy.sky.moon.Moon.time_by_altitude","text":"Time at which moon passes a given altitude. This really does have to be iterated since the moon moves fairly quickly. Parameters: Name Type Description Default alt Angle If array, then must be the same length as time_guess desired altitude. required time_guess Initial guess; this needs to be fairly close. required location EarthLocation required Returns: Type Description Optional [ Time ] Optional[Time]: a Time, or None if non-convergent.","title":"time_by_altitude()"},{"location":"docs/lucupy/sky/sun/","text":"Sun A interface to calculate different night events regarding the Sun. To use this is required to chain the at method at the beginning. If not unhandled errors would happen. at ( time ) staticmethod Low-precision position of the sun. Good to about 0.01 degree, from the 1990 Astronomical Almanac p. C24. At this level topocentric correction is not needed. Parameters: Name Type Description Default time Time of the position required Returns: Name Type Description SkyCoord SkyCoord in the geocentric frame of epoch of date. rise_and_set ( location , time , midnight , set_alt , rise_alt ) staticmethod Compute rise and set times for this Sun. For the current location and time of the night. Parameters: Name Type Description Default location EarthLocation Earth location required time Time time of the night. required midnight Time Midnight time. required set_alt Angle sunset altitude. required rise_alt Angle sunrise altitude. required Returns: Type Description Tuple [ Time , Time , Time , Time ] The time of the event for the body in the precision of this Sun. time_by_altitude ( alt , time_guess , location , timestep = 0.002 ) staticmethod Time at which the sun crosses a particular altitude. This of course happens twice a day (or not at all); The usual use case will be to compute roughly when sunset or twilight occurs, and hand the result to this routine to get a more exact answer. time_guess is the starting time for iteration. This must be fairly close so that the iteration converges on the correct phenomenon (e.g., rise time, not set time). This uses the low-precision sun location, which is typically good to 0.01 degree. That's plenty good enough for computing rise, set, and twilight times. Parameters: Name Type Description Default alt Angle Desired altitude. If array, then must be the same length as time_guess. required time_guess Time Is a Time approximating the answer. required location EarthLocation EarthLocation required Raises: Type Description ValueError Different lengths for Altitude and time_guess ArithmeticError Sunrise, set, or twilight calculation not converging Returns: Type Description Optional [ Time ] Time if convergent None if non-convergent","title":"sun"},{"location":"docs/lucupy/sky/sun/#lucupy.sky.sun.Sun","text":"A interface to calculate different night events regarding the Sun. To use this is required to chain the at method at the beginning. If not unhandled errors would happen.","title":"Sun"},{"location":"docs/lucupy/sky/sun/#lucupy.sky.sun.Sun.at","text":"Low-precision position of the sun. Good to about 0.01 degree, from the 1990 Astronomical Almanac p. C24. At this level topocentric correction is not needed. Parameters: Name Type Description Default time Time of the position required Returns: Name Type Description SkyCoord SkyCoord in the geocentric frame of epoch of date.","title":"at()"},{"location":"docs/lucupy/sky/sun/#lucupy.sky.sun.Sun.rise_and_set","text":"Compute rise and set times for this Sun. For the current location and time of the night. Parameters: Name Type Description Default location EarthLocation Earth location required time Time time of the night. required midnight Time Midnight time. required set_alt Angle sunset altitude. required rise_alt Angle sunrise altitude. required Returns: Type Description Tuple [ Time , Time , Time , Time ] The time of the event for the body in the precision of this Sun.","title":"rise_and_set()"},{"location":"docs/lucupy/sky/sun/#lucupy.sky.sun.Sun.time_by_altitude","text":"Time at which the sun crosses a particular altitude. This of course happens twice a day (or not at all); The usual use case will be to compute roughly when sunset or twilight occurs, and hand the result to this routine to get a more exact answer. time_guess is the starting time for iteration. This must be fairly close so that the iteration converges on the correct phenomenon (e.g., rise time, not set time). This uses the low-precision sun location, which is typically good to 0.01 degree. That's plenty good enough for computing rise, set, and twilight times. Parameters: Name Type Description Default alt Angle Desired altitude. If array, then must be the same length as time_guess. required time_guess Time Is a Time approximating the answer. required location EarthLocation EarthLocation required Raises: Type Description ValueError Different lengths for Altitude and time_guess ArithmeticError Sunrise, set, or twilight calculation not converging Returns: Type Description Optional [ Time ] Time if convergent None if non-convergent","title":"time_by_altitude()"},{"location":"docs/lucupy/sky/utils/","text":"current_geocent_frame ( time ) Get current frame for the equinox specified by the time. Parameters: Name Type Description Default time Time If an array then the first entry is used required Returns: Type Description BaseRADecFrame an astropy PrecessedGeocentric time. geocentric_coors ( geolong , geolat , height ) Geocentric XYZ coordinates for a location at a longitude, latitude and height above sea level. Retained because if one replaces the longitude input with the sidereal time, the return is the XYZ in the equatorial frame of date. This is used in the lunar topocentric correction. Parameters: Name Type Description Default geolong Angle Geographic longitude, or LST to get celestial-aligned result required geolat float Geographic latitude required height float Height above sea level, which must be in meters. required Returns: Type Description Tuple [ float , float , float ] Triple of distances. hour_angle_to_angle ( dec , lat , alt ) Transform the Hour Angle in to an Angle. The hour angle from spherical astronomy, eastor west of meridian, not the u.hourangle from astropy. dec and alt must have the same dimensions. If the object is always above alt, an Angle of +1000 radians is returned. If always below, -1000 radians. Parameters: Name Type Description Default dec AngleParam Declination of source. required lat AngleParam Latitude of site. required alt AngleParam Height above horizon for computation. required Returns: Type Description Angle An Angle giving the hour angle at which the declination dec reaches altitude alt. local_midnight_time ( time , localtzone ) Find nearest local midnight (UT). If it's before noon local time, returns previous midnight; if after noon, return next midnight. Parameters: Name Type Description Default time Time astropy Time object required localtzone timezone) Timezone object. required Returns: Type Description Time Time. This is not zone-aware, but should be correct. local_sidereal_time ( time , location ) Moderate-precision (1 sec) local sidereal time. Adapted with minimal changes from skycalc routine. Native astropy routines are unnecessarily precise for our purposes and rather slow. Parameters: Name Type Description Default time Time Time at which to compute the local sidereal time. required location Location Location on Earth for which to compute the local sidereal time. required Returns: Name Type Description lst Angle Local sidereal time. min_max_alt ( lat , dec ) Finds the minimum and maximum altitudes of a celestial location. Parameters: Name Type Description Default lat Angle) Latitude of site. required dec AngleParam) Declination of the object. required Returns: Type Description Tuple [ Angle , Angle ] minalt, maxalt (Tuple[Angle, Angle]): tuple of minimum and maximum altitudes. true_airmass ( altit ) True airmass for an altitude. Equivalent of getAirmass in the QPT, based on vskyutil.true_airmass https://github.com/gemini-hlsw/ocs/blob/12a0999bc8bb598220ddbccbdbab5aa1e601ebdd/bundle/edu.gemini.qpt.client/src/main/java/edu/gemini/qpt/core/util/ImprovedSkyCalcMethods.java#L119 Based on a fit to Kitt Peak airmass tables, C. M. Snell & A. M. Heiser, 1968, PASP, 80, 336. Valid to about airmass 12, and beyond that just returns secz minus 1.5, which won't be quite right. Takes an Angle and return the true airmass, based on a tabulation of the mean KPNO atmosphere given by C. M. Snell & A. M. Heiser, 1968, PASP, 80, 336. They tabulated the airmass at 5 degr intervals from z = 60 to 85 degrees; The data was fit with a fourth order poly for (secz - airmass) as a function of (secz - 1) using the IRAF curfit routine, then adjusted the zeroth order term to force (secz - airmass) to zero at z = 0. The poly fit is very close to the tabulated points (largest difference is 3.2e-4) and appears smooth. This 85-degree point is at secz = 11.47, so for secz > 12 just return secz coefs = [2.879465E-3, 3.033104E-3, 1.351167E-3, -4.716679E-5] Parameters: Name Type Description Default altit Angle Altitude above horizon. required Returns: Type Description npt . NDArray [ float ] True airmass value xair ( zd ) Evaluate true airmass. Equation 3 from Krisciunas & Schaefer 1991. Trick for handling arrays and scalars from https://stackoverflow.com/questions/29318459/python-function-that-handles-scalar-or-arrays Parameters: Name Type Description Default zd Quantity Float or numpy array of zenith distance angles required Returns: Type Description npt . NDArray [ float ] npt.NDArray[float]: values converted. ztwilight ( alt ) Estimate twilight contribution to zenith sky brightness, in magnitudes per square arcsecond. Evaluates a polynomial approximation to observational data (see source for reference) of zenith sky brightness (blue) as a function of the sun's elevation from -0.9 degrees to -18 degrees. For reference, 3 mag is roughly Nautical twilight and looks 'pretty dark'; something like 10 mag is about the maximum for broadband sky flats in many cases. Parameters: Name Type Description Default alt Angle Sun's elevation. Meaningful range is -0.9 to -18 degrees. required Returns: Type Description npt . NDArray [ float ] An array but if the sun is up, returns 20; if the sun below -18, returns 0.","title":"utils"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.current_geocent_frame","text":"Get current frame for the equinox specified by the time. Parameters: Name Type Description Default time Time If an array then the first entry is used required Returns: Type Description BaseRADecFrame an astropy PrecessedGeocentric time.","title":"current_geocent_frame()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.geocentric_coors","text":"Geocentric XYZ coordinates for a location at a longitude, latitude and height above sea level. Retained because if one replaces the longitude input with the sidereal time, the return is the XYZ in the equatorial frame of date. This is used in the lunar topocentric correction. Parameters: Name Type Description Default geolong Angle Geographic longitude, or LST to get celestial-aligned result required geolat float Geographic latitude required height float Height above sea level, which must be in meters. required Returns: Type Description Tuple [ float , float , float ] Triple of distances.","title":"geocentric_coors()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.hour_angle_to_angle","text":"Transform the Hour Angle in to an Angle. The hour angle from spherical astronomy, eastor west of meridian, not the u.hourangle from astropy. dec and alt must have the same dimensions. If the object is always above alt, an Angle of +1000 radians is returned. If always below, -1000 radians. Parameters: Name Type Description Default dec AngleParam Declination of source. required lat AngleParam Latitude of site. required alt AngleParam Height above horizon for computation. required Returns: Type Description Angle An Angle giving the hour angle at which the declination dec reaches altitude alt.","title":"hour_angle_to_angle()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.local_midnight_time","text":"Find nearest local midnight (UT). If it's before noon local time, returns previous midnight; if after noon, return next midnight. Parameters: Name Type Description Default time Time astropy Time object required localtzone timezone) Timezone object. required Returns: Type Description Time Time. This is not zone-aware, but should be correct.","title":"local_midnight_time()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.local_sidereal_time","text":"Moderate-precision (1 sec) local sidereal time. Adapted with minimal changes from skycalc routine. Native astropy routines are unnecessarily precise for our purposes and rather slow. Parameters: Name Type Description Default time Time Time at which to compute the local sidereal time. required location Location Location on Earth for which to compute the local sidereal time. required Returns: Name Type Description lst Angle Local sidereal time.","title":"local_sidereal_time()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.min_max_alt","text":"Finds the minimum and maximum altitudes of a celestial location. Parameters: Name Type Description Default lat Angle) Latitude of site. required dec AngleParam) Declination of the object. required Returns: Type Description Tuple [ Angle , Angle ] minalt, maxalt (Tuple[Angle, Angle]): tuple of minimum and maximum altitudes.","title":"min_max_alt()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.true_airmass","text":"True airmass for an altitude. Equivalent of getAirmass in the QPT, based on vskyutil.true_airmass https://github.com/gemini-hlsw/ocs/blob/12a0999bc8bb598220ddbccbdbab5aa1e601ebdd/bundle/edu.gemini.qpt.client/src/main/java/edu/gemini/qpt/core/util/ImprovedSkyCalcMethods.java#L119 Based on a fit to Kitt Peak airmass tables, C. M. Snell & A. M. Heiser, 1968, PASP, 80, 336. Valid to about airmass 12, and beyond that just returns secz minus 1.5, which won't be quite right. Takes an Angle and return the true airmass, based on a tabulation of the mean KPNO atmosphere given by C. M. Snell & A. M. Heiser, 1968, PASP, 80, 336. They tabulated the airmass at 5 degr intervals from z = 60 to 85 degrees; The data was fit with a fourth order poly for (secz - airmass) as a function of (secz - 1) using the IRAF curfit routine, then adjusted the zeroth order term to force (secz - airmass) to zero at z = 0. The poly fit is very close to the tabulated points (largest difference is 3.2e-4) and appears smooth. This 85-degree point is at secz = 11.47, so for secz > 12 just return secz coefs = [2.879465E-3, 3.033104E-3, 1.351167E-3, -4.716679E-5] Parameters: Name Type Description Default altit Angle Altitude above horizon. required Returns: Type Description npt . NDArray [ float ] True airmass value","title":"true_airmass()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.xair","text":"Evaluate true airmass. Equation 3 from Krisciunas & Schaefer 1991. Trick for handling arrays and scalars from https://stackoverflow.com/questions/29318459/python-function-that-handles-scalar-or-arrays Parameters: Name Type Description Default zd Quantity Float or numpy array of zenith distance angles required Returns: Type Description npt . NDArray [ float ] npt.NDArray[float]: values converted.","title":"xair()"},{"location":"docs/lucupy/sky/utils/#lucupy.sky.utils.ztwilight","text":"Estimate twilight contribution to zenith sky brightness, in magnitudes per square arcsecond. Evaluates a polynomial approximation to observational data (see source for reference) of zenith sky brightness (blue) as a function of the sun's elevation from -0.9 degrees to -18 degrees. For reference, 3 mag is roughly Nautical twilight and looks 'pretty dark'; something like 10 mag is about the maximum for broadband sky flats in many cases. Parameters: Name Type Description Default alt Angle Sun's elevation. Meaningful range is -0.9 to -18 degrees. required Returns: Type Description npt . NDArray [ float ] An array but if the sun is up, returns 20; if the sun below -18, returns 0.","title":"ztwilight()"},{"location":"docs/lucupy/timeutils/","text":"dec2sex ( d , p = 3 , cutsec = False , hour = False , tohour = False , sep = ':' , leadzero = 0 , round_min = False ) Convert decimal degrees/hours to a formatted sexigesimal string. Parameters: Name Type Description Default d float Input in degrees required p int Digits for seconds 3 cutsec bool Cut seconds, just display, e.g. DD:MM False hour bool d is decimal hours, so must be <=24 False tohour bool Convert from degress to hours (divide by 15.) False sep str Separator string ':' leadzero int If >0 display leading 0's, e.g. -05:25. The value is the number of digits for the DD or HR field. 0 round_min bool When cutsec, round to the nearest minute rather than truncate False Returns: Name Type Description str str That modify string dtsex2dec ( dt , todegree = False ) Datetime to decimals Returns: Name Type Description float float The decimal equivalent sex2dec ( stime , todegree = False , sep = ':' ) \"Sexadecimal to decimal Parameters: Name Type Description Default stime str A string of format \"HR:MIN:SEC required todegree bool Option to convert to degree. Defaults to False. False sep str Separator. Defaults to ':'. ':' Raises: Type Description ValueError Wrong format for not following the separator convention. Returns: Name Type Description float float The decimal equivalent sixty ( dd ) Sixty Parameters: Name Type Description Default dd float Days required Returns: Type Description Tuple [ int , int , int ] Tuple[int, int, int]: Degrees, minutes and seconds","title":"timeutils"},{"location":"docs/lucupy/timeutils/#lucupy.timeutils.dec2sex","text":"Convert decimal degrees/hours to a formatted sexigesimal string. Parameters: Name Type Description Default d float Input in degrees required p int Digits for seconds 3 cutsec bool Cut seconds, just display, e.g. DD:MM False hour bool d is decimal hours, so must be <=24 False tohour bool Convert from degress to hours (divide by 15.) False sep str Separator string ':' leadzero int If >0 display leading 0's, e.g. -05:25. The value is the number of digits for the DD or HR field. 0 round_min bool When cutsec, round to the nearest minute rather than truncate False Returns: Name Type Description str str That modify string","title":"dec2sex()"},{"location":"docs/lucupy/timeutils/#lucupy.timeutils.dtsex2dec","text":"Datetime to decimals Returns: Name Type Description float float The decimal equivalent","title":"dtsex2dec()"},{"location":"docs/lucupy/timeutils/#lucupy.timeutils.sex2dec","text":"\"Sexadecimal to decimal Parameters: Name Type Description Default stime str A string of format \"HR:MIN:SEC required todegree bool Option to convert to degree. Defaults to False. False sep str Separator. Defaults to ':'. ':' Raises: Type Description ValueError Wrong format for not following the separator convention. Returns: Name Type Description float float The decimal equivalent","title":"sex2dec()"},{"location":"docs/lucupy/timeutils/#lucupy.timeutils.sixty","text":"Sixty Parameters: Name Type Description Default dd float Days required Returns: Type Description Tuple [ int , int , int ] Tuple[int, int, int]: Degrees, minutes and seconds","title":"sixty()"},{"location":"docs/lucupy/types/","text":"","title":"types"}]}